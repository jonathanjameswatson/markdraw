<nav class="navbar" role="navigation" aria-label="main navigation">
    <div class="container">
        <div class="navbar-brand">
            <a class="navbar-item" href=".">
                <img src="./icon.png" width="48" height="48">
                <b>Markdraw</b>
            </a>

            <a role="button" class="navbar-burger@(active ? " is-active" : "")" aria-label="menu" aria-expanded="@(active)" @onclick="ToggleActive">
                <span aria-hidden="true"></span>
                <span aria-hidden="true"></span>
                <span aria-hidden="true"></span>
            </a>
        </div>

        <div class="navbar-menu@(active ? " is-active" : "")">
            <div class="navbar-start">
                <a class="navbar-item" href="https://github.com/jonathanjameswatson/markdraw">
                    GitHub
                </a>
            </div>

            <div class="navbar-end">
                <div class="navbar-item">
                    <div class="buttons">
                        <button class="button" @onclick="Import">
                            Import
                        </button>
                        <button class="button" @onclick="Export">
                            Export
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal@(modal != ModalOpen.Neither ? " is-active" : "")">
        <div class="modal-background"></div>
        <div class="modal-content">
            <div class="box">
                @if (modal == ModalOpen.Import)
                {
                    <div class="field">
                        <label class="label">Markdown</label>
                        <p class="control">
                            <textarea class="textarea" placeholder="Input markdown" @bind="temporaryMarkdown"></textarea>
                        </p>
                    </div>
                    <div class="buttons">
                        <button class="button" @onclick="SetMarkdown">
                            Import and close
                        </button>
                        <button class="button" @onclick="Close">
                            Close
                        </button>
                    </div>
                }
                else if (modal == ModalOpen.Export)
                {
                    <div class="field">
                        <label class="label">Markdown</label>
                        <p class="control">
                            <textarea class="textarea" @bind="exportMarkdown" readonly></textarea>
                        </p>
                    </div>
                    <div class="buttons">
                        <button class="button" @onclick="Close">
                            Close
                        </button>
                    </div>
                }
            </div>
        </div>
        <button class="modal-close is-large" aria-label="close" @onclick="Close"></button>
    </div>
</nav>

@code{
    private bool active = false;

    private void ToggleActive()
    {
        active = !active;
    }

    private enum ModalOpen
    {
        Neither,
        Import,
        Export
    }

    private ModalOpen modal = ModalOpen.Neither;

    private void Close()
    {
        modal = ModalOpen.Neither;
    }

    private void Import()
    {
        modal = ModalOpen.Import;
    }

    private void Export()
    {
        exportMarkdown = ExportMarkdown();
        modal = ModalOpen.Export;
    }

    private string markdown;
    private string temporaryMarkdown;

    private string exportMarkdown;

    [Parameter]
    public string ImportMarkdown
    {
        get => markdown;
        set
        {
            if (markdown == value) return;
            temporaryMarkdown = value;
            markdown = value;
            ImportMarkdownChanged.InvokeAsync(value);
        }
    }

    public void SetMarkdown()
    {
        ImportMarkdown = temporaryMarkdown;
        Close();
    }

    [Parameter]
    public EventCallback<string> ImportMarkdownChanged { get; set; }

    [Parameter]
    public Func<string> ExportMarkdown { get; set; }

}