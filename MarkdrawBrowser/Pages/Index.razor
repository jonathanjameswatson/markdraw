@page "/"
@using Markdraw.Delta;
@using Markdraw.Tree;
@using System.Threading.Tasks;
@using System.Collections.Generic;
@inject HttpClient Http;
@inject IJSRuntime JS;

@code {
  private string markdown = "";
  private string content = "<p>Loading...</p>";
  private DeltaTree deltaTree;
  private Editor editor;

  private ModalOpen modal = ModalOpen.None;
  private string modalLink = "";
  private string modalImageUrl = "";
  private string modalImageAlt = "";
  private string modalCodeLanguage = "";
  private string modalCodeContents = "";

  private DotNetObjectReference<Index> indexRef;

  private enum ModalOpen {
    None,
    Image,
    Link,
    Code
  }

  public string Markdown
  {
    get => markdown;
    set
    {
      markdown = value;
      deltaTree.SetWithMarkdown(markdown);
      content = deltaTree.Root.ToString();
    }
  }

  protected override async Task OnInitializedAsync()
  {
    indexRef = DotNetObjectReference.Create(this);
    await JS.InvokeVoidAsync("setReference", indexRef);
    deltaTree = new DeltaTree(markdown);
    var url = "https://raw.githubusercontent.com/jonathanjameswatson/markdraw/main/sample.md";
    Markdown = await Http.GetStringAsync(url);
  }

  public class Cursor
  {
    public int start { get; set; }
    public int end { get; set; }
    public int nextLine { get; set; }
  }

  public async Task<Cursor> GetCursor()
  {
    return await JS.InvokeAsync<Cursor>("getCursor");
  }

  public async Task SetFormat(Format format)
  {
    var cursorPos = await GetCursor();
    var transformation = new Ops();

    if (cursorPos.start > 0)
    {
      transformation.Retain(cursorPos.start);
    }

    int end = format is ModifyingLineFormat || format is LineFormat ? cursorPos.nextLine : cursorPos.end;

    if (end - cursorPos.start != 0)
    {
      transformation.Retain(end - cursorPos.start, format);
    }

    deltaTree.Delta = deltaTree.Delta.Transform(transformation);
    content = deltaTree.Root.ToString();
  }

  public int InsertElementsWithCursor(Ops inserts, Cursor cursorPos) {
    var transformation = new Ops();

    if (cursorPos.start > 0)
    {
      transformation.Retain(cursorPos.start);
    }

    if (cursorPos.end - cursorPos.start != 0)
    {
      transformation.Delete(cursorPos.end - cursorPos.start);
    }

    transformation.InsertMany(inserts);

    deltaTree.Delta = deltaTree.Delta.Transform(transformation);
    content = deltaTree.Root.ToString();

    return cursorPos.start + inserts.Characters;
  }

  public async Task InsertElements(Ops inserts) {
    var cursorPos = await GetCursor();
    InsertElementsWithCursor(inserts, cursorPos);
  }

  public async Task Bold()
  {
    await SetFormat(new TextFormat(true, null, null));
  }

  public async Task Italic()
  {
    await SetFormat(new TextFormat(null, true, null));
  }

  public void Link()
  {
    modal = ModalOpen.Link;
  }

  public async Task Quote()
  {
    await SetFormat(new ModifyingLineFormat(list => list.Insert(0, Indent.Quote), i => i));
  }

  public async Task Bullet()
  {
    await SetFormat(new ModifyingLineFormat(list => list.Insert(0, Indent.Bullet), i => i));
  }

  public async Task Number()
  {
    await SetFormat(new ModifyingLineFormat(list => list.Insert(0, Indent.Number(2)), i => i));
  }

  public async Task Clear()
  {
    await SetFormat(new TextFormat(false, false, ""));
  }

  public async Task ClearLine()
  {
    await SetFormat(new ModifyingLineFormat(list => list.Clear(), i => i));
  }

  public async Task HeaderUp()
  {
    await SetFormat(new ModifyingLineFormat(list => { }, i => Math.Max((i + 6) % 7, 1)));
  }

  public async Task HeaderDown()
  {
    await SetFormat(new ModifyingLineFormat(list => { }, i => (i == 0 ? i : i + 1) % 7));
  }

  public void Image()
  {
    modal = ModalOpen.Image;
  }

  public async Task Divider()
  {
    await InsertElements(
      new Ops()
        .Insert(new LineInsert())
        .Insert(new DividerInsert())
        .Insert(new LineInsert())
    );
  }

  public void Code()
  {
    modal = ModalOpen.Code;
  }

  private void Close() {
    modal = ModalOpen.None;
  }

  private async Task SetLink()
  {
    await SetFormat(new TextFormat(null, null, modalLink));
    Close();
  }

  private async Task AddImage()
  {
    await InsertElements(
      new Ops()
        .Insert(new ImageInsert(modalImageUrl, modalImageAlt))
    );
    Close();
  }

  private async Task AddCode()
  {
    await InsertElements(
      new Ops()
        .Insert(new LineInsert())
        .Insert(new CodeInsert(modalCodeContents, modalCodeLanguage))
        .Insert(new LineInsert())
    );
    Close();
  }

  [JSInvokable]
  public int InsertText(String text, Cursor cursor) {
    var splittedText = new List<string>(text.Split("\n"));
    var ops = new Ops();

    foreach (string part in splittedText.GetRange(0, splittedText.Count - 1)) {
      if (part.Length != 0) {
        ops.Insert(part);
      }
      ops.Insert(new LineInsert());
    }

    string final = splittedText[splittedText.Count - 1];
    if (final.Length != 0) {
      ops.Insert(final);
    }

    int i = InsertElementsWithCursor(ops, cursor);

    StateHasChanged();

    return i;
  }

  [JSInvokable]
  public int RemoveText(bool backwards, Cursor cursor) {
    var transformation = new Ops();
    int i = cursor.end;

    int range = cursor.end - cursor.start;
    int retainAmount = range == 0 && backwards ? cursor.start - 1 : cursor.start;

    if (retainAmount > 0)
    {
      transformation.Retain(retainAmount);
    }

    transformation.Delete(Math.Max(range, 1));

    deltaTree.Delta = deltaTree.Delta.Transform(transformation);
    content = deltaTree.Root.ToString();
    StateHasChanged();

    return Math.Max(0, retainAmount);
  }

  public string ExportMarkdown() {
    return deltaTree.Delta.ToString();
  }
}

<div>
  <NavBar @bind-ImportMarkdown="Markdown" ExportMarkdown="ExportMarkdown"></NavBar>

  <div class="modal@(modal != ModalOpen.None ? " is-active" : "")">
    <div class="modal-background"></div>
    <div class="modal-content">
      <div class="box">
        @if (modal == ModalOpen.Link) {
          <div class="field">
            <label class="label">Link address</label>
            <p class="control">
              <input class="input" type="text" @bind="modalLink">
            </p>
          </div>
          <div class="buttons">
            <button class="button" @onclick="SetLink">
              Set link
            </button>
            <button class="button" @onclick="Close">
              Close
            </button>
          </div>
        } else if (modal == ModalOpen.Image) {
          <div class="field">
            <label class="label">Image address</label>
            <p class="control">
              <input class="input" type="text" @bind="modalImageUrl">
            </p>
          </div>
          <div class="field">
            <label class="label">Alternative text</label>
            <p class="control">
              <input class="input" type="text" @bind="modalImageAlt">
            </p>
          </div>
          <div class="buttons">
            <button class="button" @onclick="AddImage">
              Insert image
            </button>
            <button class="button" @onclick="Close">
              Close
            </button>
          </div>
        } else if (modal == ModalOpen.Code) {
          <div class="field">
            <label class="label">Language</label>
            <p class="control">
              <input class="input" type="text" @bind="modalCodeLanguage">
            </p>
          </div>
          <div class="field">
            <label class="label">Code</label>
            <p class="control">
              <textarea class="textarea" @bind="modalCodeContents"></textarea>
            </p>
          </div>
          <div class="buttons">
            <button class="button" @onclick="AddCode">
              Insert code
            </button>
            <button class="button" @onclick="Close">
              Close
            </button>
          </div>
        }
      </div>
    </div>
    <button class="modal-close is-large" aria-label="close" @onclick="Close"></button>
  </div>

  <div class="section">
    <div class="container">
      <div class="columns is-mobile">
        <div class="column is-narrow format-buttons">
          <FormatButton icon="format-bold" @onclick="Bold"></FormatButton>
          <FormatButton icon="format-italic" @onclick="Italic"></FormatButton>
          <!--<FormatButton icon="code-tags" Disabled></FormatButton>-->
          <FormatButton icon="link" @onclick="Link"></FormatButton>
          <hr class="buttons-divider" />
          <FormatButton icon="format-quote-close" @onclick="Quote"></FormatButton>
          <FormatButton icon="format-list-bulleted" @onclick="Bullet"></FormatButton>
          <FormatButton icon="format-list-numbered" @onclick="Number"></FormatButton>
          <hr class="buttons-divider" />
          <FormatButton icon="format-clear" @onclick="Clear"></FormatButton>
          <FormatButton icon="format-horizontal-align-left" @onclick="ClearLine"></FormatButton>
          <hr class="buttons-divider" />
          <FormatButton icon="format-font-size-increase" @onclick="HeaderUp"></FormatButton>
          <FormatButton icon="format-font-size-decrease" @onclick="HeaderDown"></FormatButton>
          <hr class="buttons-divider" />
          <FormatButton icon="image" @onclick="Image"></FormatButton>
          <FormatButton icon="minus" @onclick="Divider"></FormatButton>
          <FormatButton icon="code-not-equal-variant" @onclick="Code"></FormatButton>
        </div>

        <div class="column content-container">
          <Editor Content="@content" @ref="editor"></Editor>
        </div>
      </div>
    </div>
  </div>
</div>
